const Notification = require('../models/Notification');

class NotificationService {
  // T·∫°o th√¥ng b√°o ƒë∆°n h√†ng
  static async createOrderNotification(userId, orderId, status, message) {
    try {
      const notification = await Notification.create({
        user: userId,
        title: `C·∫≠p nh·∫≠t ƒë∆°n h√†ng #${orderId}`,
        message: message,
        type: 'order',
        data: {
          orderId,
          status
        }
      });
      return notification;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o ƒë∆°n h√†ng:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o s·∫£n ph·∫©m
  static async createProductNotification(userId, productId, productName, action) {
    try {
      let title, message;
      
      switch (action) {
        case 'restock':
          title = 'S·∫£n ph·∫©m ƒë√£ c√≥ h√†ng tr·ªü l·∫°i';
          message = `S·∫£n ph·∫©m "${productName}" ƒë√£ c√≥ h√†ng tr·ªü l·∫°i. H√£y nhanh tay ƒë·∫∑t h√†ng!`;
          break;
        case 'price_drop':
          title = 'Gi√° s·∫£n ph·∫©m gi·∫£m';
          message = `S·∫£n ph·∫©m "${productName}" ƒë√£ gi·∫£m gi√°. Ki·ªÉm tra ngay!`;
          break;
        case 'new_product':
          title = 'S·∫£n ph·∫©m m·ªõi';
          message = `S·∫£n ph·∫©m m·ªõi "${productName}" ƒë√£ c√≥ s·∫µn. Kh√°m ph√° ngay!`;
          break;
        default:
          title = 'Th√¥ng b√°o s·∫£n ph·∫©m';
          message = `C√≥ c·∫≠p nh·∫≠t v·ªÅ s·∫£n ph·∫©m "${productName}"`;
      }

      const notification = await Notification.create({
        user: userId,
        title,
        message,
        type: 'product',
        data: {
          productId,
          productName,
          action
        }
      });
      return notification;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o s·∫£n ph·∫©m:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o khuy·∫øn m√£i
  static async createPromotionNotification(userId, promotionTitle, message, discount) {
    try {
      const notification = await Notification.create({
        user: userId,
        title: promotionTitle,
        message: message,
        type: 'promotion',
        data: {
          discount,
          promotionTitle
        }
      });
      return notification;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o khuy·∫øn m√£i:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o h·ªá th·ªëng
  static async createSystemNotification(userId, title, message, data = {}) {
    try {
      const notification = await Notification.create({
        user: userId,
        title,
        message,
        type: 'system',
        data
      });
      return notification;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o h·ªá th·ªëng:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o cho nhi·ªÅu user
  static async createBulkNotification(userIds, title, message, type = 'other', data = {}) {
    try {
      const notifications = userIds.map(userId => ({
        user: userId,
        title,
        message,
        type,
        data
      }));

      const createdNotifications = await Notification.insertMany(notifications);
      return createdNotifications;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o h√†ng lo·∫°t:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o cho t·∫•t c·∫£ user (admin function)
  static async createNotificationForAllUsers(title, message, type = 'other', data = {}) {
    try {
      // L·∫•y danh s√°ch t·∫•t c·∫£ user t·ª´ database
      // B·∫°n c·∫ßn import User model v√† thay th·∫ø logic n√†y
      const User = require('../models/User');
      const users = await User.find({}, 'username email');
      
      const userIds = users.map(user => user.username || user.email);
      
      if (userIds.length === 0) {
        throw new Error('Kh√¥ng c√≥ user n√†o trong h·ªá th·ªëng');
      }

      return await this.createBulkNotification(userIds, title, message, type, data);
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o cho t·∫•t c·∫£ user:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o ch√†o m·ª´ng cho user m·ªõi
  static async createWelcomeNotification(userId, username) {
    try {
      const notification = await Notification.create({
        user: userId,
        title: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ShopStore! üéâ',
        message: `Xin ch√†o ${username}! C·∫£m ∆°n b·∫°n ƒë√£ tham gia c·ªông ƒë·ªìng ShopStore. Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi!`,
        type: 'system',
        data: {
          action: 'welcome',
          username
        }
      });
      return notification;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o ch√†o m·ª´ng:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü ƒë∆°n h√†ng
  static async createOrderReminderNotification(userId, orderId, daysLeft) {
    try {
      const notification = await Notification.create({
        user: userId,
        title: 'Nh·∫Øc nh·ªü ƒë∆°n h√†ng',
        message: `ƒê∆°n h√†ng #${orderId} c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c giao trong ${daysLeft} ng√†y t·ªõi. H√£y chu·∫©n b·ªã nh·∫≠n h√†ng!`,
        type: 'order',
        data: {
          orderId,
          daysLeft,
          action: 'reminder'
        }
      });
      return notification;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü ƒë∆°n h√†ng:', error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o ƒë√°nh gi√° s·∫£n ph·∫©m
  static async createReviewReminderNotification(userId, productId, productName) {
    try {
      const notification = await Notification.create({
        user: userId,
        title: 'ƒê√°nh gi√° s·∫£n ph·∫©m',
        message: `B·∫°n ƒë√£ mua s·∫£n ph·∫©m "${productName}". H√£y chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n ƒë·ªÉ gi√∫p ng∆∞·ªùi kh√°c!`,
        type: 'product',
        data: {
          productId,
          productName,
          action: 'review_reminder'
        }
      });
      return notification;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü ƒë√°nh gi√°:', error);
      throw error;
    }
  }
}

module.exports = NotificationService;
